# Build properties used by zAppBuild/build.groovy

#
# Run zUnit Tests
# Defaults to "false", to enable, set to "true"
runzTests=true

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,bind.properties,Assembler.properties,BMS.properties,Cobol.properties,LinkEdit.properties,bind.properties,PLI.properties,MFS.properties,PSBgen.properties,DBDgen.properties,ACBgen.properties,ZunitConfig.properties

#
# Comma separated list all source directories included in application build. Supports both absolute
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Comma separated list of the build script processing order
buildOrder=BMS.groovy,Cobol.groovy,Assembler.groovy,LinkEdit.groovy

#
# Comma seperated list of the test script processing order
testOrder=ZunitConfig.groovy

#
# The main build branch.  Used for cloning collections for topic branch builds instead
# of rescanning the entire application.
mainBuildBranch=Development

#
# exclude list used when scanning or running full build
### NOTE: added **/*.json to the list
excludeFileList=.*,**/*.properties,**/*.xml,**/*.groovy,**/*.md,**/application-conf/*.*,**/*.json,**/*.plbck

###############################################################
# Dependency Analysis and Impact Analysis configuration
###############################################################
#
# flag to define which DBB API is used for dependency and impact analysis
#
#  false = uses the DependencyResolver and ImpactResolver APIs (default)
#          please note that DependencyResolver and ImpactResolver APIs are deprecated
#          configuration is based on the lang_resolutionRules and impactResolutionRules build properties
#
#  true  = leverages the DBB SearchPathDependencyResolver and SearchParthImpactFinder APIs introduced with DBB 1.1.2
#          configuration is based on the lang_dependencySearch and impactSearch build properties
#
useSearchConfiguration=false

#
# boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
#
#  requires to use new APIs via useSearchConfiguration=true
#  default:false
resolveSubsystems=false

#
# comma-separated list of file patterns for which impact calculation should be skipped. Uses glob file patterns
# sample: skipImpactCalculationList=**/epsmtout.cpy,**/centralCopybooks/*.cpy
skipImpactCalculationList=

#
# Job card, please use \n to indicate a line break and use \ to break the line in this property file
# Example: jobCard=//RUNZUNIT JOB ,MSGCLASS=H,CLASS=A,NOTIFY=&SYSUID,REGION=0M
jobCard=//RUNZUNIT JOB ,MSGCLASS=H,CLASS=A,NOTIFY=&SYSUID,REGION=0M



#
# Impact analysis resolution rules (JSON format).
# Defaults to just looking for local application dependency folders
impactResolutionRules=[${copybookRule},${bmsRule},${linkRule},${testconfigRule},${testcasePgmRule}]

# Rule to locate Cobol copy books. This rule defaults to the local copybook folder
# in the main application folder.
copybookRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/copylib"} \
                 ] \
               }

bmsRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/bms"} \
                 ] \
               }

linkRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/cobol"} \
                 ] \
               }


# dependency resolution rule to locate playback file
testplayRule =   {"library": "SYSPLAY", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/testplayback"} \
              ] \
            }
# impact resolution of impacted test configurations
testconfigRule =   {"category": "ZUNITINC", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/cobol"}, \
                 {"sourceDir": "${workspace}", "directory": "${application}/testcase"} \
              ] \
            }

# impact resolution of impacted test cases
testcasePgmRule =   {"library" : "SYSPROG", "category": "PROGRAMDEPENDENCY", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/cobol"} \
              ] \
            }


# Impact finder resolution search configuration
#  leverages the SearchPathImpactFinder API
impactSearch=${copybookSearch}${bmsSearch}${linkSearch}${zunitTestConfigSearch}${zunitTestcasePgmSearch}

# asmMacroSearch
# searchPath to locate Assembler macro files
# used in dependency resolution and impact analysis
asmMacroSearch = search:[SYSLIB:MACRO]${workspace}/?path=${application}/maclib/*.mac

# asmCopySearch
# searchPath to locate Assembler copy files
# used in dependency resolution and impact analysis
asmCopySearch = search:[SYSLIB:COPY]${workspace}/?path=${application}/maclib/*.mac

#
# bmsSearch
# searchPath to locate impacted bms maps
# used only in impact analysis
bmsSearch = search:${workspace}/?path=${application}/bms/*.bms

#
# copybookSearch
# searchPath to locate Cobol copybooks
# used in dependency resolution and impact analysis
#
# Please be as specific as possible when configuring the searchPath.
# Alternate configurations:
#
# dependency resolution from multiple repositories / multiple root folders:
# copybookSearch = search:${workspace}/?path=**/copybook/*.cpy
#
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy and cobcpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy;**/*.cobcpy
#
# dependency resolution in the application directory and a shared common copybook location:
# copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy;/u/build/common/copybooks/*.cpy
#
# More samples can be found along with the syntax for the search path configurations at:
# https://www.ibm.com/docs/en/dbb/1.1.0?topic=scripts-how-manage-build-dependencies#6-resolving-logical-build-dependencies-to-local-physical-files
#
copybookSearch = search:${workspace}/?path=${application}/copylib/*.cpy

#
# linkSearch
#
# searchPath to locate impacted linkcards or main programs after an included submodule is changed
# leverages the output collection, which has the dependency info from the executable
# category LINK only; used only in impact analysis
#
# Additional samples:
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl:
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl and pli (for cobol and pli submodules):
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl,**/*.pli
#
# More samples can be found along with the syntax for the search path configurations at:
# https://www.ibm.com/docs/en/dbb/1.1.0?topic=scripts-how-manage-build-dependencies#6-resolving-logical-build-dependencies-to-local-physical-files
#
# Special case with Dependency Scanner Transfer Control Statement capturing turned on (default is off)
# the scanners detect a static call to the literal, which would need to turn into a new rule for CALL:
# staticCallSearch = search:[:CALL]${workspace}/?path=${application}/cobol/*.cbl
#
linkSearch = search:[:LINK]${workspace}/?path=${application}/cobol/*.cbl

#
# zunitPlayfileSearch
# searchPath to locate zunit playback files
# used in dependency resolution
zunitPlayfileSearch = search:[SYSPLAY:]${workspace}/?path=${application}/testplayback/*.plbck

# zunitTestConfigSearch
# searchPath to locate zunit config files
# used in impact analysis
zunitTestConfigSearch = search:[:ZUNITINC]${workspace}/?path=${application}/cobol/*.cbl;${application}/pli/*.pli;${application}/testcase/*.cbl;${application}/testcase/*.pli

#
# zunitTestcasePgmSearch
# searchPath to locate impacted test case programs
# see also build-conf/build.properties -> createTestcaseDependency
# used in impact analysis
zunitTestcasePgmSearch = search:[SYSPROG:PROGRAMDEPENDENCY]${workspace}/?path=${application}/cobol/*.cbl

